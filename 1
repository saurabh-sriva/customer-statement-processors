pick   51479da add code refactor
squash 79cdc49 add logging in exception handler and code refactoring
squash 10d1157 code refactoring and create the unit test case for CustomerStatmentUtils class
squash f20e684 fixed issues in test cases
squash 1bac302 fixed issues in test cases
squash b4bbb93 removed unsed import from test class
squash bc084ad add refactor the code and improved the testcases
squash f4c7be9 fixed issues

# Rebase d451c3a..f4c7be9 onto f4c7be9 (8 commands)
#
# Commands:
# p, pick <commit> = use commit
# r, reword <commit> = use commit, but edit the commit message
# e, edit <commit> = use commit, but stop for amending
# s, squash <commit> = use commit, but meld into previous commit
# f, fixup <commit> = like "squash", but discard this commit's log message
# x, exec <command> = run command (the rest of the line) using shell
# b, break = stop here (continue rebase later with 'git rebase --continue')
# d, drop <commit> = remove commit
# l, label <label> = label current HEAD with a name
# t, reset <label> = reset HEAD to a label
# m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]
# .       create a merge commit using the original merge commit's
# .       message (or the oneline, if no original merge commit was
# .       specified). Use -c <commit> to reword the commit message.
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
#
# Note that empty commits are commented out
